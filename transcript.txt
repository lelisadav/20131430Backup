Chez Scheme Transcript [Wed May 14 13:11:11 2014]
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	
	Our result: (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum)
break> q

> (parse-exp '(letrec ([product
                         (lambda (x y)
                           (if (null? y)
                               '()
                               (let loop ([x x] [accum '()])
                                 (if (null? x)
                                     accum
                                     (loop (cdr x)
                                           (append (map (lambda (s)
                                                          (list (car x) s))
                                                        y)
                                                   accum))))))])
                 (product '(1 2 3) '(a b))))
(letrec-exp
  (product)
  ((x y))
  ((if-else-exp
     (app-exp (var-exp null?) ((var-exp y)))
     (lit-exp '())
     (app-exp
       (letrec-exp
         (loop)
         ((x accum))
         ((if-else-exp
            (app-exp (var-exp null?) ((var-exp x)))
            (var-exp accum)
            (app-exp
              (var-exp loop)
              ((app-exp (var-exp cdr) ((var-exp x)))
                (app-exp
                  (var-exp append)
                  ((app-exp
                     (var-exp map)
                     ((lambda-exp
                        (s)
                        ((app-exp
                           (var-exp list)
                           ((app-exp (var-exp car) ((var-exp x)))
                             (var-exp s)))))
                       (var-exp y)))
                    (var-exp accum)))))))
         ((var-exp loop)))
       ((var-exp x) (lit-exp '())))))
  ((app-exp
     (var-exp product)
     ((lit-exp '(1 2 3)) (lit-exp '(a b))))))
> (syntax-expand (parse-exp '(letrec ([product
                         (lambda (x y)
                           (if (null? y)
                               '()
                               (let loop ([x x] [accum '()])
                                 (if (null? x)
                                     accum
                                     (loop (cdr x)
                                           (append (map (lambda (s)
                                                          (list (car x) s))
                                                        y)
                                                   accum))))))])
                 (product '(1 2 3) '(a b)))))
(letrec-exp
  (product)
  ((x y))
  ((if-else-exp
     (app-exp (var-exp null?) ((var-exp y)))
     (lit-exp '())
     (app-exp
       (letrec-exp
         (loop)
         ((x accum))
         ((if-else-exp
            (app-exp (var-exp null?) ((var-exp x)))
            (var-exp accum)
            (app-exp
              (var-exp loop)
              ((app-exp (var-exp cdr) ((var-exp x)))
                (app-exp
                  (var-exp append)
                  ((app-exp
                     (var-exp map)
                     ((lambda-exp
                        (s)
                        ((app-exp
                           (var-exp list)
                           ((app-exp (var-exp car) ((var-exp x)))
                             (var-exp s)))))
                       (var-exp y)))
                    (var-exp accum)))))))
         ((var-exp loop)))
       ((var-exp x) (lit-exp '())))))
  ((app-exp
     (var-exp product)
     ((lit-exp '(1 2 3)) (lit-exp '(a b))))))
> (iotass 4 0)
(0 1 2 3)
> (trace extend-env-recursively)
(extend-env-recursively)
> (syntax-expand (parse-exp '(letrec ([product
                         (lambda (x y)
                           (if (null? y)
                               '()
                               (let loop ([x x] [accum '()])
                                 (if (null? x)
                                     accum
                                     (loop (cdr x)
                                           (append (map (lambda (s)
                                                          (list (car x) s))
                                                        y)
                                                   accum))))))])
                 (product '(1 2 3) '(a b)))))
(letrec-exp
  (product)
  ((x y))
  ((if-else-exp
     (app-exp (var-exp null?) ((var-exp y)))
     (lit-exp '())
     (app-exp
       (letrec-exp
         (loop)
         ((x accum))
         ((if-else-exp
            (app-exp (var-exp null?) ((var-exp x)))
            (var-exp accum)
            (app-exp
              (var-exp loop)
              ((app-exp (var-exp cdr) ((var-exp x)))
                (app-exp
                  (var-exp append)
                  ((app-exp
                     (var-exp map)
                     ((lambda-exp
                        (s)
                        ((app-exp
                           (var-exp list)
                           ((app-exp (var-exp car) ((var-exp x)))
                             (var-exp s)))))
                       (var-exp y)))
                    (var-exp accum)))))))
         ((var-exp loop)))
       ((var-exp x) (lit-exp '())))))
  ((app-exp
     (var-exp product)
     ((lit-exp '(1 2 3)) (lit-exp '(a b))))))
> (eval-one-exp '(letrec ([product
                         (lambda (x y)
                           (if (null? y)
                               '()
                               (let loop ([x x] [accum '()])
                                 (if (null? x)
                                     accum
                                     (loop (cdr x)
                                           (append (map (lambda (s)
                                                          (list (car x) s))
                                                        y)
                                                   accum))))))])
                 (product '(1 2 3) '(a b))))


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	
	Our result: |(extend-env-recursively
   (product)
   ((x y))
   ((if-else-exp
      (app-exp (var-exp null?) ((var-exp y)))
      (lit-exp '())
      (app-exp
        (letrec-exp
          (loop)
          ((x accum))
          ((if-else-exp
             (app-exp (var-exp null?) ((var-exp x)))
             (var-exp accum)
             (app-exp
               (var-exp loop)
               ((app-exp (var-exp cdr) ((var-exp x)))
                 (app-exp
                   (var-exp append)
                   ((app-exp
                      (var-exp map)
                      ((lambda-exp
                         (s)
                         ((app-exp
                            (var-exp list)
                            ((app-exp (var-exp car) ((var-exp x)))
                              (var-exp s)))))
                        (var-exp y)))
                     (var-exp accum)))))))
          ((var-exp loop)))
        ((var-exp x) (lit-exp '())))))
   (empty-env-record))
|#0=(extended-env-record
      (product)
      #((lambda-proc-with-env
          (x y)
          ((if-else-exp
             (app-exp (var-exp null?) ((var-exp y)))
             (lit-exp '())
             (app-exp
               (letrec-exp
                 (loop)
                 ((x accum))
                 ((if-else-exp
                    (app-exp (var-exp null?) ((var-exp x)))
                    (var-exp accum)
                    (app-exp
                      (var-exp loop)
                      ((app-exp (var-exp cdr) ((var-exp x)))
                        (app-exp
                          (var-exp append)
                          ((app-exp
                             (var-exp map)
                             ((lambda-exp
                                (s)
                                ((app-exp
                                   (var-exp list)
                                   ((app-exp (var-exp car) ((var-exp x)))
                                     (var-exp s)))))
                               (var-exp y)))
                            (var-exp accum)))))))
                 ((var-exp loop)))
               ((var-exp x) (lit-exp '())))))
          #0#))
      (empty-env-record))
(extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '
break> q

> (eval-one-exp '(letrec ([product
                         (lambda (x y)
                             
                             
                           (if (null? y)
                               '()
                               (let loop ([x x] [accum '()])
                                          (newline)
                                          (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                                 (if (null? x)
                                     accum
                                     (loop (cdr x)
                                           (append (map (lambda (s)
                                                          (list (car x) s))
                                                        y)
                                                   accum))))))])
                 (product '(1 2 3) '(a b))))


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	
















































	Our result: |(extend-env-recursively
   (product)
   ((x y))
   ((if-else-exp
      (app-exp (var-exp null?) ((var-exp y)))
      (lit-exp '())
      (app-exp
        (letrec-exp
          (loop)
          ((x accum))
          ((app-exp (var-exp newline) ()))
          ((var-exp loop)))
        ((var-exp x) (lit-exp '())))))
   (empty-env-record))
|#0=(extended-env-record
      (product)
      #((lambda-proc-with-env
          (x y)
          ((if-else-exp
             (app-exp (var-exp null?) ((var-exp y)))
             (lit-exp '())
             (app-exp
               (letrec-exp
                 (loop)
                 ((x accum))
                 ((app-exp (var-exp newline) ()))
                 ((var-exp loop)))
               ((var-exp x) (lit-exp '())))))
          #0#))
      (empty-env-record))
(extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (
break> q

> (load "main.ss")
Exception in read: unexpected end-of-file reading list at line 166, char 1 of interpreter.ss
Type (debug) to enter the debugger.
> (load "main.ss")
> (eval-one-exp '(letrec ([product
                         (lambda (x y)
                             
                             
                           (if (null? y)
                               '()
                               (let loop ([x x] [accum '()])
                                          (newline)
                                          (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                                 (if (null? x)
                                     accum
                                     (loop (cdr x)
                                           (append (map (lambda (s)
                                                          (list (car x) s))
                                                        y)
                                                   accum))))))])
                 (product '(1 2 3) '(a b))))


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	(extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()))))) (extended-env-record (product) #((lambda-proc-with-env (x y) ((if-else-exp (app-exp (var-exp null?) ((var-exp y))) (lit-exp '()) (app-exp (letrec-exp (loop) ((x accum)) ((app-exp (var-exp newline) ())) ((var-exp loop))) ((var-exp x) (lit-exp '()
break> q

> (parameterize ([pretty-print (lambda x '())] [display (lambda x '())]))
Exception: invalid syntax (parameterize ((pretty-print (...)) (display (...))))
Type (debug) to enter the debugger.
> (fluid-let ([pretty-print (lambda x '())] [display (lambda x '())])
    (eval-one-exp '(letrec ([product
                         (lambda (x y)
                             
                             
                           (if (null? y)
                               '()
                               (let loop ([x x] [accum '()])
                                          (newline)
                                          (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                             (newline)
                                 (if (null? x)
                                     accum
                                     (loop (cdr x)
                                           (append (map (lambda (s)
                                                          (list (car x) s))
                                                        y)
                                                   accum))))))])
                 (product '(1 2 3) '(a b)))))
Exception: attempt to assign immutable variable pretty-print
Type (debug) to enter the debugger.
