Chez Scheme Transcript [Wed May 14 15:03:34 2014]
> (eval-one-exp '
                (letrec ([union
                          (lambda (s1 s2)
                            (cond [(null? s1) s2]
                                  [(member? (car s1) s2) (union (cdr s1) s2)]
                                  [else (cons (car s1) (union (cdr s1) s2))]))]
                         [member? (lambda (sym ls)
                                    (cond [(null? ls) #f]
                                          [(eqv? (car ls) sym) #t]
                                          [else (member? sym (cdr ls))]))])
                  (union '(a c e d k) '(e b a d c))))


	Evaluating:	(letrec ((union (lambda (s1 s2) (cond ((null? s1) s2) ((member? (car s1) s2) (union (cdr s1) s2)) (else (cons (car s1) (union (cdr s1) s2)))))) (member? (lambda (sym ls) (cond ((null? ls) #f) ((eqv? (car ls) sym) #t) (else (member? sym (cdr ls))))))) (union '(a c e d k) '(e b a d c)))
	The correct answer is:	(extended-env-record (sym ls) #(a (e b a d c)) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) #((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp 
break> q

> (load "main.ss")
Exception in read: bracketed list terminated by parenthesis at line 36, char 57 of interpreter.ss
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	
Exception in cases: Bad fields in (letrec-exp (vars idss vals body) (letrec-exp vars idss (map syntax-expand vals) (map syntax-expand body))).
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	
Exception in list->vector: #(#<procedure> #<procedure>) is not a proper list
Type (debug) to enter the debugger.
> (trace eval-exp)
(eval-exp)
> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	|(eval-exp
   (letrec-exp
     (even? odd?)
     ((lambda-exp
        (n)
        ((if-else-exp
           (app-exp (var-exp zero?) ((var-exp n)))
           (lit-exp #t)
           (app-exp
             (var-exp odd?)
             ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))))
       (lambda-exp
         (m)
         ((if-else-exp
            (app-exp (var-exp zero?) ((var-exp m)))
            (lit-exp #f)
            (app-exp
              (var-exp even?)
              ((app-exp (var-exp -) ((var-exp m) (lit-exp 1)))))))))
     ((app-exp
        (var-exp list)
        ((app-exp (var-exp odd?) ((lit-exp 3)))
          (app-exp (var-exp even?) ((lit-exp 3)))
          (app-exp (var-exp odd?) ((lit-exp 4)))
          (app-exp (var-exp even?) ((lit-exp 4)))))))
   (empty-env-record))
Exception in list->vector: #(#<procedure> #<procedure>) is not a proper list
Type (debug) to enter the debugger.
> (trace extend-env)
(extend-env)
> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	|(eval-exp
   (letrec-exp
     (even? odd?)
     ((lambda-exp
        (n)
        ((if-else-exp
           (app-exp (var-exp zero?) ((var-exp n)))
           (lit-exp #t)
           (app-exp
             (var-exp odd?)
             ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))))
       (lambda-exp
         (m)
         ((if-else-exp
            (app-exp (var-exp zero?) ((var-exp m)))
            (lit-exp #f)
            (app-exp
              (var-exp even?)
              ((app-exp (var-exp -) ((var-exp m) (lit-exp 1)))))))))
     ((app-exp
        (var-exp list)
        ((app-exp (var-exp odd?) ((lit-exp 3)))
          (app-exp (var-exp even?) ((lit-exp 3)))
          (app-exp (var-exp odd?) ((lit-exp 4)))
          (app-exp (var-exp even?) ((lit-exp 4)))))))
   (empty-env-record))
| (extend-env (even? odd?) #(#<procedure> #<procedure>) (empty-env-record))
Exception in list->vector: #(#<procedure> #<procedure>) is not a proper list
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	
Exception in list->vector: #(#<procedure> #<procedure>) is not a proper list
Type (debug) to enter the debugger.
> (trace eval-exp)
(eval-exp)
> (trace extend-env)
(extend-env)
> (load "main.ss")
> (trace extend-env eval-exp)
(extend-env eval-exp)
> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	|(eval-exp
   (letrec-exp
     (even? odd?)
     ((lambda-exp
        (n)
        ((if-else-exp
           (app-exp (var-exp zero?) ((var-exp n)))
           (lit-exp #t)
           (app-exp
             (var-exp odd?)
             ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))))
       (lambda-exp
         (m)
         ((if-else-exp
            (app-exp (var-exp zero?) ((var-exp m)))
            (lit-exp #f)
            (app-exp
              (var-exp even?)
              ((app-exp (var-exp -) ((var-exp m) (lit-exp 1)))))))))
     ((app-exp
        (var-exp list)
        ((app-exp (var-exp odd?) ((lit-exp 3)))
          (app-exp (var-exp even?) ((lit-exp 3)))
          (app-exp (var-exp odd?) ((lit-exp 4)))
          (app-exp (var-exp even?) ((lit-exp 4)))))))
   (empty-env-record))
| (extend-env (even? odd?) #(#<procedure> #<procedure>) (empty-env-record))
Exception in list->vector: #(#<procedure> #<procedure>) is not a proper list
Type (debug) to enter the debugger.
> (trace go-through-and-change)
(go-through-and-change)
> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	|(eval-exp
   (letrec-exp
     (even? odd?)
     ((lambda-exp
        (n)
        ((if-else-exp
           (app-exp (var-exp zero?) ((var-exp n)))
           (lit-exp #t)
           (app-exp
             (var-exp odd?)
             ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))))
       (lambda-exp
         (m)
         ((if-else-exp
            (app-exp (var-exp zero?) ((var-exp m)))
            (lit-exp #f)
            (app-exp
              (var-exp even?)
              ((app-exp (var-exp -) ((var-exp m) (lit-exp 1)))))))))
     ((app-exp
        (var-exp list)
        ((app-exp (var-exp odd?) ((lit-exp 3)))
          (app-exp (var-exp even?) ((lit-exp 3)))
          (app-exp (var-exp odd?) ((lit-exp 4)))
          (app-exp (var-exp even?) ((lit-exp 4)))))))
   (empty-env-record))
| (extend-env (even? odd?) #(#<procedure> #<procedure>) (empty-env-record))
Exception in list->vector: #(#<procedure> #<procedure>) is not a proper list
Type (debug) to enter the debugger.
> (load "main.ss")
> (load "main.ss")
Exception in extended-env-record:   Bad vals field (list? #((prim-proc +) (prim-proc -) (prim-proc add1) (prim-proc sub1) (prim-proc cons) (prim-proc =) ...)) => #f.
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	
Exception: variable bodies is not bound
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	
Exception in cases:    Not a proc-val variant: #<procedure>.
Type (debug) to enter the debugger.
> (trace apply-proc apply-prim-proc)
(apply-proc apply-prim-proc)
> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	|(apply-proc #<procedure> (4))
Exception in cases:    Not a proc-val variant: #<procedure>.
Type (debug) to enter the debugger.
> (load "main.ss")
> (trace apply-proc apply-prim-proc)
(apply-proc apply-prim-proc)
> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	|(apply-proc #(42) (4))
Exception in cases:    Not a proc-val variant: #(42).
Type (debug) to enter the debugger.
> (load "main.ss")
> (trace apply-proc apply-prim-proc)
(apply-proc apply-prim-proc)
> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	
Exception in vector-set!: (lambda-proc-with-env (n) ((if-else-exp (...) (...) (...))) (extended-env-record (even? odd?) #(#(...) #(...)) (empty-env-record))) is not a valid index for #(#0=#(42) #0#)
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	
Exception in list->vector: #<void> is not a proper list
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	
Exception in cases:    Not a proc-val variant: #(42).
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	
Exception in vector-set!: (#0=#(42) #0#) is not a vector
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	
Exception in vector->list: (#0=#(42) #0#) is not a vector
Type (debug) to enter the debugger.
> (load "main.ss")
> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	(#t #f #f #t)
	Our result: (#t #f #f #t)
	Correct!

	Evaluating:	(let ((n 5)) (let f ((n n) (acc 1)) (if (= n 0) acc (f (sub1 n) (* acc n)))))
	The correct answer is:	120
	Our result: 120
	Correct!

	Evaluating:	(let f ((n 8) (acc 1)) (if (= n 0) acc (f (sub1 n) (* acc n))))
	The correct answer is:	40320
	Our result: 40320
	Correct!

	Evaluating:	(letrec ((fact (lambda (x) (if (zero? x) 1 (* x (fact (- x 1))))))) (map fact '(0 1 2 3 4 5)))
	The correct answer is:	(1 1 2 6 24 120)
	Our result: (1 1 2 6 24 120)
	Correct!: All-correct
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	(extended-env-record (x accum) ((1 2 3) ()) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp 
break> q

> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	(extended-env-record (x accum) ((1 2 3) ()) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()
break> q

> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (newline) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	(extended-env-record (x accum) ((1 2 3) ()) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (app-exp (var-exp newline) ()) (if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum
break> q

> (load "a17-test-code.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	(extended-env-record (x accum) ((1 2 3) ()) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x))) (var-exp accum) (app-exp (var-exp loop) ((app-exp (var-exp cdr) ((var-exp x))) (app-exp (var-exp append) ((app-exp (var-exp map) ((lambda-exp (s) ((app-exp (var-exp list) ((app-exp (var-exp car) ((var-exp x))) (var-exp s))))) (var-exp y))) (var-exp accum))))))) (extended-env-record (loop) ((lambda-proc-with-env (x accum) ((if-else-exp (app-exp (var-exp null?) ((var-exp x)
break> q

> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: (((3 a) (3 b)) (((2 a) (2 b)) (((1 a) (1 b)) ())))
	Incorrect.

	Evaluating:	(letrec ((union (lambda (s1 s2) (cond ((null? s1) s2) ((member? (car s1) s2) (union (cdr s1) s2)) (else (cons (car s1) (union (cdr s1) s2)))))) (member? (lambda (sym ls) (cond ((null? ls) #f) ((eqv? (car ls) sym) #t) (else (member? sym (cdr ls))))))) (union '(a c e d k) '(e b a d c)))
	The correct answer is:	(extended-env-record (sym ls) (a (e b a d c)) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1
break> q

> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: (((3 a) (3 b)) (((2 a) (2 b)) (((1 a) (1 b)) ())))
	Incorrect.

	Evaluating:	(letrec ((union (lambda (s1 s2) (cond ((null? s1) s2) ((member? (car s1) s2) (union (cdr s1) s2)) (else (cons (car s1) (union (cdr s1) s2)))))) (member? (lambda (sym ls) (cond ((null? ls) #f) ((eqv? (car ls) sym) #t) (else (member? sym (cdr ls))))))) (union '(a c e d k) '(e b a d c)))
	The correct answer is:	(extended-env-record (sym ls) (a (e b a d c)) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) 
break> q

> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	(#t #f #f #t)
	Our result: (#t #f #f #t)
	Correct!

	Evaluating:	(let ((n 5)) (let f ((n n) (acc 1)) (if (= n 0) acc (f (sub1 n) (* acc n)))))
	The correct answer is:	120
	Our result: 120
	Correct!

	Evaluating:	(let f ((n 8) (acc 1)) (if (= n 0) acc (f (sub1 n) (* acc n))))
	The correct answer is:	40320
	Our result: 40320
	Correct!

	Evaluating:	(letrec ((fact (lambda (x) (if (zero? x) 1 (* x (fact (- x 1))))))) (map fact '(0 1 2 3 4 5)))
	The correct answer is:	(1 1 2 6 24 120)
	Our result: (1 1 2 6 24 120)
	Correct!: All-correct
> (test-additional)


	Evaluating:	(letrec ((sort (lambda (pred? l) (if (null? l) l (dosort pred? l (length l))))) (merge (lambda (pred? l1 l2) (cond ((null? l1) l2) ((null? l2) l1) ((pred? (car l2) (car l1)) (cons (car l2) (merge pred? l1 (cdr l2)))) (else (cons (car l1) (merge pred? (cdr l1) l2)))))) (dosort (lambda (pred? ls n) (if (= n 1) (list (car ls)) (let ((mid (quotient n 2))) (merge pred? (dosort pred? ls mid) (dosort pred? (list-tail ls mid) (- n mid)))))))) (sort > '(3 8 1 4 2 5 6)))
	The correct answer is:	(extended-env-record (mid) (3) (extended-env-record (pred? ls n) ((prim-proc >) (3 8 1 4 2 5 6) 7) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l)))))
break> q

> (load "main.ss")
> (test-additional)


	Evaluating:	(letrec ((sort (lambda (pred? l) (if (null? l) l (dosort pred? l (length l))))) (merge (lambda (pred? l1 l2) (cond ((null? l1) l2) ((null? l2) l1) ((pred? (car l2) (car l1)) (cons (car l2) (merge pred? l1 (cdr l2)))) (else (cons (car l1) (merge pred? (cdr l1) l2)))))) (dosort (lambda (pred? ls n) (if (= n 1) (list (car ls)) (let ((mid (quotient n 2))) (merge pred? (dosort pred? ls mid) (dosort pred? (list-tail ls mid) (- n mid)))))))) (sort > '(3 8 1 4 2 5 6)))
	The correct answer is:	(extended-env-record (mid) (3) (extended-env-record (pred? ls n) ((prim-proc >) (3 8 1 4 2 5 6) 7) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))))))) (extended-env-record (sort merge dosort) ((lambda-proc-with-env (pred? l) ((if-else-exp (app-exp (var-exp null?) ((var-exp l))) (var-exp l) (app-exp (var-exp dosort) ((var-exp pred?) (var-exp l) (app-exp (var-exp length) ((var-exp l))
break> q

> (load "main.ss")
> (test-additional)


	Evaluating:	(letrec ((sort (lambda (pred? l) (if (null? l) l (dosort pred? l (length l))))) (merge (lambda (pred? l1 l2) (cond ((null? l1) l2) ((null? l2) l1) ((pred? (car l2) (car l1)) (cons (car l2) (merge pred? l1 (cdr l2)))) (else (cons (car l1) (merge pred? (cdr l1) l2)))))) (dosort (lambda (pred? ls n) (if (= n 1) (list (car ls)) (let ((mid (quotient n 2))) (merge pred? (dosort pred? ls mid) (dosort pred? (list-tail ls mid) (- n mid)))))))) (sort > '(3 8 1 4 2 5 6)))
	The correct answer is:	: All-correct
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	

	Evaluating:	(letrec ((union (lambda (s1 s2) (cond ((null? s1) s2) ((member? (car s1) s2) (union (cdr s1) s2)) (else (cons (car s1) (union (cdr s1) s2)))))) (member? (lambda (sym ls) (cond ((null? ls) #f) ((eqv? (car ls) sym) #t) (else (member? sym (cdr ls))))))) (union '(a c e d k) '(e b a d c)))
	The correct answer is:	(extended-env-record (sym ls) (a (e b a d c)) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1)
break> q

> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	

	Evaluating:	(letrec ((union (lambda (s1 s2) (cond ((null? s1) s2) ((member? (car s1) s2) (union (cdr s1) s2)) (else (cons (car s1) (union (cdr s1) s2)))))) (member? (lambda (sym ls) (cond ((null? ls) #f) ((eqv? (car ls) sym) #t) (else (member? sym (cdr ls))))))) (union '(a c e d k) '(e b a d c)))
	The correct answer is:	(extended-env-record (sym ls) (a (e b a d c)) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp cons) ((app-exp (var-exp car) ((var-exp s1))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2)))))))) (extended-env-record (union member?) ((lambda-proc-with-env (s1 s2) ((if-else-exp (app-exp (var-exp null?) ((var-exp s1))) (var-exp s2) (if-else-exp (app-exp (var-exp member?) ((app-exp (var-exp car) ((var-exp s1))) (var-exp s2))) (app-exp (var-exp union) ((app-exp (var-exp cdr) ((var-exp s1))) (var-exp s2))) (app-exp
break> q

> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	

	Evaluating:	(letrec ((union (lambda (s1 s2) (cond ((null? s1) s2) ((member? (car s1) s2) (union (cdr s1) s2)) (else (cons (car s1) (union (cdr s1) s2)))))) (member? (lambda (sym ls) (cond ((null? ls) #f) ((eqv? (car ls) sym) #t) (else (member? sym (cdr ls))))))) (union '(a c e d k) '(e b a d c)))
	The correct answer is:	: (correct:
  ((k e b d a c) ((3 a) (2 b) (3 b) (2 a) (1 a) (1 b)))
  yours:
  ((k e b a d c)
    (((3 a) (3 b)) (((2 a) (2 b)) (((1 a) (1 b)) ())))))
> (cd "C:/Users/daveyle/Documents/GitHub/20131430")
> (load "main.ss")
> (load "a17-test-code.ss")
> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	(extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp (var-exp -) ((var-exp n) (lit-exp 1))))))) (extended-env-record (even? odd?) #((lambda-proc-with-env (n) ((if-else-exp (app-exp (var-exp zero?) ((var-exp n))) (lit-exp #t) (app-exp (var-exp odd?) ((app-exp
break> q

> (cd "C:/Users/daveyle/Documents/GitHub/20131430Backup")
> (load "main.ss")
> (load "a17-test-code.ss")
> (test-basics)


	Evaluating:	(letrec ((even? (lambda (n) (if (zero? n) #t (odd? (- n 1))))) (odd? (lambda (m) (if (zero? m) #f (even? (- m 1)))))) (list (odd? 3) (even? 3) (odd? 4) (even? 4)))
	The correct answer is:	

	Evaluating:	(let ((n 5)) (let f ((n n) (acc 1)) (if (= n 0) acc (f (sub1 n) (* acc n)))))
	The correct answer is:	

	Evaluating:	(let f ((n 8) (acc 1)) (if (= n 0) acc (f (sub1 n) (* acc n))))
	The correct answer is:	

	Evaluating:	(letrec ((fact (lambda (x) (if (zero? x) 1 (* x (fact (- x 1))))))) (map fact '(0 1 2 3 4 5)))
	The correct answer is:	: All-correct
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	

	Evaluating:	(letrec ((union (lambda (s1 s2) (cond ((null? s1) s2) ((member? (car s1) s2) (union (cdr s1) s2)) (else (cons (car s1) (union (cdr s1) s2)))))) (member? (lambda (sym ls) (cond ((null? ls) #f) ((eqv? (car ls) sym) #t) (else (member? sym (cdr ls))))))) (union '(a c e d k) '(e b a d c)))
	The correct answer is:	: (correct:
  ((k e b d a c) ((3 a) (2 b) (3 b) (2 a) (1 a) (1 b)))
  yours:
  ((k e b a d c)
    (((3 a) (3 b)) (((2 a) (2 b)) (((1 a) (1 b)) ())))))
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	

	Evaluating:	(letrec ((union (lambda (s1 s2) (cond ((null? s1) s2) ((member? (car s1) s2) (union (cdr s1) s2)) (else (cons (car s1) (union (cdr s1) s2)))))) (member? (lambda (sym ls) (cond ((null? ls) #f) ((eqv? (car ls) sym) #t) (else (member? sym (cdr ls))))))) (union '(a c e d k) '(e b a d c)))
	The correct answer is:	: (correct:
  ((k e b d a c) ((3 a) (2 b) (3 b) (2 a) (1 a) (1 b)))
  yours:
  ((k e b a d c)
    (((3 a) (3 b)) (((2 a) (2 b)) (((1 a) (1 b)) ())))))
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	

	Evaluating:	(letrec ((union (lambda (s1 s2) (cond ((null? s1) s2) ((member? (car s1) s2) (union (cdr s1) s2)) (else (cons (car s1) (union (cdr s1) s2)))))) (member? (lambda (sym ls) (cond ((null? ls) #f) ((eqv? (car ls) sym) #t) (else (member? sym (cdr ls))))))) (union '(a c e d k) '(e b a d c)))
	The correct answer is:	: (correct:
  ((k e b d a c) ((3 a) (2 b) (3 b) (2 a) (1 a) (1 b)))
  yours:
  ((k e b a d c)
    (((3 a) (3 b)) (((2 a) (2 b)) (((1 a) (1 b)) ())))))
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	

	Evaluating:	(letrec ((union (lambda (s1 s2) (cond ((null? s1) s2) ((member? (car s1) s2) (union (cdr s1) s2)) (else (cons (car s1) (union (cdr s1) s2)))))) (member? (lambda (sym ls) (cond ((null? ls) #f) ((eqv? (car ls) sym) #t) (else (member? sym (cdr ls))))))) (union '(a c e d k) '(e b a d c)))
	The correct answer is:	: (correct:
  ((k e b d a c) ((3 a) (2 b) (3 b) (2 a) (1 a) (1 b)))
  yours:
  ((k e b a d c)
    (((3 a) (3 b)) (((2 a) (2 b)) (((1 a) (1 b)) ())))))
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	

	Evaluating:	(letrec ((union (lambda (s1 s2) (cond ((null? s1) s2) ((member? (car s1) s2) (union (cdr s1) s2)) (else (cons (car s1) (union (cdr s1) s2)))))) (member? (lambda (sym ls) (cond ((null? ls) #f) ((eqv? (car ls) sym) #t) (else (member? sym (cdr ls))))))) (union '(a c e d k) '(e b a d c)))
	The correct answer is:	: (correct:
  ((k e b d a c) ((3 a) (2 b) (3 b) (2 a) (1 a) (1 b)))
  yours:
  ((k e b a d c)
    (((3 a) (3 b)) (((2 a) (2 b)) (((1 a) (1 b)) ())))))
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	

	Evaluating:	(letrec ((union (lambda (s1 s2) (cond ((null? s1) s2) ((member? (car s1) s2) (union (cdr s1) s2)) (else (cons (car s1) (union (cdr s1) s2)))))) (member? (lambda (sym ls) (cond ((null? ls) #f) ((eqv? (car ls) sym) #t) (else (member? sym (cdr ls))))))) (union '(a c e d k) '(e b a d c)))
	The correct answer is:	: (correct:
  ((k e b d a c) ((3 a) (2 b) (3 b) (2 a) (1 a) (1 b)))
  yours:
  ((k e b a d c)
    (((3 a) (3 b)) (((2 a) (2 b)) (((1 a) (1 b)) ())))))
> (test-additional)


	Evaluating:	(letrec ((sort (lambda (pred? l) (if (null? l) l (dosort pred? l (length l))))) (merge (lambda (pred? l1 l2) (cond ((null? l1) l2) ((null? l2) l1) ((pred? (car l2) (car l1)) (cons (car l2) (merge pred? l1 (cdr l2)))) (else (cons (car l1) (merge pred? (cdr l1) l2)))))) (dosort (lambda (pred? ls n) (if (= n 1) (list (car ls)) (let ((mid (quotient n 2))) (merge pred? (dosort pred? ls mid) (dosort pred? (list-tail ls mid) (- n mid)))))))) (sort > '(3 8 1 4 2 5 6)))
	The correct answer is:	: All-correct
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	

	Evaluating:	(letrec ((union (lambda (s1 s2) (cond ((null? s1) s2) ((member? (car s1) s2) (union (cdr s1) s2)) (else (cons (car s1) (union (cdr s1) s2)))))) (member? (lambda (sym ls) (cond ((null? ls) #f) ((eqv? (car ls) sym) #t) (else (member? sym (cdr ls))))))) (union '(a c e d k) '(e b a d c)))
	The correct answer is:	: (correct:
  ((k e b d a c) ((3 a) (2 b) (3 b) (2 a) (1 a) (1 b)))
  yours:
  ((k e b a d c)
    (((3 a) (3 b)) (((2 a) (2 b)) (((1 a) (1 b)) ())))))
> (load "main.ss")
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: (((3 a) (3 b)) (((2 a) (2 b)) (((1 a) (1 b)) ())))
	Incorrect.

	Evaluating:	(letrec ((union (lambda (s1 s2) (cond ((null? s1) s2) ((member? (car s1) s2) (union (cdr s1) s2)) (else (cons (car s1) (union (cdr s1) s2)))))) (member? (lambda (sym ls) (cond ((null? ls) #f) ((eqv? (car ls) sym) #t) (else (member? sym (cdr ls))))))) (union '(a c e d k) '(e b a d c)))
	The correct answer is:	(k e b a d c)
	Our result: (k e b a d c)
	Correct!: (correct:
  ((k e b d a c) ((3 a) (2 b) (3 b) (2 a) (1 a) (1 b)))
  yours:
  ((k e b a d c)
    (((3 a) (3 b)) (((2 a) (2 b)) (((1 a) (1 b)) ())))))
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: (((3 a) (3 b)) (((2 a) (2 b)) (((1 a) (1 b)) ())))
	Incorrect.

	Evaluating:	(letrec ((union (lambda (s1 s2) (cond ((null? s1) s2) ((member? (car s1) s2) (union (cdr s1) s2)) (else (cons (car s1) (union (cdr s1) s2)))))) (member? (lambda (sym ls) (cond ((null? ls) #f) ((eqv? (car ls) sym) #t) (else (member? sym (cdr ls))))))) (union '(a c e d k) '(e b a d c)))
	The correct answer is:	(k e b a d c)
	Our result: (k e b a d c)
	Correct!: (correct:
  ((k e b d a c) ((3 a) (2 b) (3 b) (2 a) (1 a) (1 b)))
  yours:
  ((k e b a d c)
    (((3 a) (3 b)) (((2 a) (2 b)) (((1 a) (1 b)) ())))))
> (load "main.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: (((3 a) (3 b)) (((2 a) (2 b)) (((1 a) (1 b)) ())))
	Incorrect.

	Evaluating:	(letrec ((union (lambda (s1 s2) (cond ((null? s1) s2) ((member? (car s1) s2) (union (cdr s1) s2)) (else (cons (car s1) (union (cdr s1) s2)))))) (member? (lambda (sym ls) (cond ((null? ls) #f) ((eqv? (car ls) sym) #t) (else (member? sym (cdr ls))))))) (union '(a c e d k) '(e b a d c)))
	The correct answer is:	(k e b a d c)
	Our result: (k e b a d c)
	Correct!: (correct:
  ((k e b d a c) ((3 a) (2 b) (3 b) (2 a) (1 a) (1 b)))
  yours:
  ((k e b a d c)
    (((3 a) (3 b)) (((2 a) (2 b)) (((1 a) (1 b)) ())))))
> (load "main.ss")
> (load "a17-test-code.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (if (null? x) accum (loop (cdr x) (display DA) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	DA
Exception: incorrect argument count in call (loop (cdr x) (display "DA") (append (map (...) y) accum))
Type (debug) to enter the debugger.
> (load "a17-test-code.ss")
> (test-answers-are-sets)


	Evaluating:	(letrec ((product (lambda (x y) (if (null? y) '() (let loop ((x x) (accum '())) (display DA) (if (null? x) accum (loop (cdr x) (append (map (lambda (s) (list (car x) s)) y) accum)))))))) (product '(1 2 3) '(a b)))
	The correct answer is:	DADADADA((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
	Our result: DADADADA(((3 a) (3 b)) (((2 a) (2 b)) (((1 a) (1 b)) ())))
	Incorrect.

	Evaluating:	(letrec ((union (lambda (s1 s2) (cond ((null? s1) s2) ((member? (car s1) s2) (union (cdr s1) s2)) (else (cons (car s1) (union (cdr s1) s2)))))) (member? (lambda (sym ls) (cond ((null? ls) #f) ((eqv? (car ls) sym) #t) (else (member? sym (cdr ls))))))) (union '(a c e d k) '(e b a d c)))
	The correct answer is:	(k e b a d c)
	Our result: (k e b a d c)
	Correct!: (correct:
  ((k e b d a c) ((3 a) (2 b) (3 b) (2 a) (1 a) (1 b)))
  yours:
  ((k e b a d c)
    (((3 a) (3 b)) (((2 a) (2 b)) (((1 a) (1 b)) ())))))
> (append-def '(3 a) '(3 b))
(3 a 3 b)
> (append-def '((3 a) (3 b)) '((2 a) (2 b)))
((3 a) (3 b) (2 a) (2 b))
> (append-def '((3 a) (3 b)) '((2 a) (2 b)) '((1 a) (1 b)))
((3 a) (3 b) (2 a) (2 b) (1 a) (1 b))
> (append-def '((3 a) (3 b)) '((2 a) (2 b)))
((3 a) (3 b) (2 a) (2 b))
